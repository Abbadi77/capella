/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.la.surrogate

import "http://www.polarsys.org/capella/core/la/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/core/core/1.4.0"
import "http://www.polarsys.org/capella/core/cs/1.4.0"
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/interaction/1.4.0"
import "http://www.polarsys.org/capella/core/ctx/1.4.0"

// End of user code

@Surrogate(feature="participatingActors")
pattern CapabilityRealization__participatingActors(self : CapabilityRealization, target : AbstractActor) {
	CapabilityRealization.involvedActors.involved(self, target);
}

@Surrogate(feature="participatingSystemComponents")
pattern CapabilityRealization__participatingSystemComponents(self : CapabilityRealization, target : SystemComponent) {
	CapabilityRealization.involvedSystemComponents.involved(self, target);
}

@Surrogate(feature="involvedActors")
pattern CapabilityRealization__involvedActors(self : CapabilityRealization, target : ActorCapabilityRealizationInvolvement) {
	CapabilityRealization.involvedInvolvements(self, target);
}

@Surrogate(feature="involvedSystemComponents")
pattern CapabilityRealization__involvedSystemComponents(self : CapabilityRealization, target : SystemComponentCapabilityRealizationInvolvement) {
	CapabilityRealization.involvedInvolvements(self, target);
}

@Surrogate(feature="realizedCapabilities")
pattern CapabilityRealization__realizedCapabilities(self : CapabilityRealization, target : Capability) {
	CapabilityRealization.outgoingTraces(self, acr);
AbstractCapabilityRealization.realizedCapability(acr, target);
}

@Surrogate(feature="realizedCapabilityRealizations")
pattern CapabilityRealization__realizedCapabilityRealizations(self : CapabilityRealization, target : CapabilityRealization) {
	CapabilityRealization.outgoingTraces(self, acr);
AbstractCapabilityRealization.realizedCapability(acr, target);
}

@Surrogate(feature="realizingCapabilityRealizations")
pattern CapabilityRealization__realizingCapabilityRealizations(self : CapabilityRealization, target : CapabilityRealization) {
	CapabilityRealization.incomingTraces(self, acr);
AbstractCapabilityRealization.realizingCapability(acr, target);
}


